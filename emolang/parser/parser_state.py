from emolang.parser.nodes import BlockScope
from emolang.lexer import TokenType


class ParserState:
    """
    The ParserState class is responsible for maintaining the state of the parser,
    including the current token index, the list of tokens, and the current block scope.
    It provides methods to retrieve and advance tokens, check for end-of-file,
    and manage block scopes during the parsing process.

    Attributes:
        _tokens (list): A list of tokens generated by the lexer.
        _current (int): The current index in the list of tokens.
        _block_scope (BlockScope): The current block scope (loop, conditional, etc.).
    """

    def __init__(self, tokens):
        """
        Initializes the parser state with a list of tokens.

        :param tokens: The list of tokens generated by the lexer.
        """
        self._tokens = tokens
        self._current = 0
        self._block_scope = BlockScope.DEFAULT

    def current_line_number(self):
        """
        Retrieves the line number of the current token being processed.

        :return: The line number of the current token.
        """
        return self.current_token().get_line()

    def current_token(self):
        """
        Retrieves the current token being processed.

        :return: The current token.
        """
        return self.retrieve_token(self._current)

    def retrieve_token(self, index):
        """
        Retrieves the token at a specified index.

        :param index: The index of the token.
        :return: The token at the specified index.
        """
        if self.in_bounds(index):
            return self._tokens[index]
        else:
            raise IndexError("Attempted to retrieve token past the end of tokens")

    def in_bounds(self, index):
        """
        Checks if the given index is within the bounds of the token list.

        :param index: Index to check.
        :return: True if the index is within the bounds, False otherwise.
        """
        return index < len(self._tokens)

    def is_eof_token(self):
        """
        Checks if the current token is the end-of-file (EOF) token.

        :return: True if the current token is EOF, False otherwise.
        """
        token = self.current_token()
        return token.is_token_type(TokenType.EOF)

    def advance_current(self, steps=1):
        new_index = self._current + steps
        if self.in_bounds(new_index):
            self._current = new_index
        else:
            raise IndexError("Attempted to advance past the end of tokens")

    def get_block_scope(self):
        return self._block_scope

    def get_current(self):
        return self._current

    def set_current(self, index):
        self._current = index

    def set_block_scope(self, scope):
        self._block_scope = scope

